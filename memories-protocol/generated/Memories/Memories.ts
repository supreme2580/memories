// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NewMemoryCreated extends ethereum.Event {
  get params(): NewMemoryCreated__Params {
    return new NewMemoryCreated__Params(this);
  }
}

export class NewMemoryCreated__Params {
  _event: NewMemoryCreated;

  constructor(event: NewMemoryCreated) {
    this._event = event;
  }

  get memoryId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get imageUrl(): string {
    return this._event.parameters[1].value.toString();
  }

  get imageDate(): string {
    return this._event.parameters[2].value.toString();
  }

  get owner(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class Memories__idToMemoryResult {
  value0: Bytes;
  value1: string;
  value2: string;
  value3: Address;

  constructor(value0: Bytes, value1: string, value2: string, value3: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    return map;
  }

  getMemoryId(): Bytes {
    return this.value0;
  }

  getImageUrl(): string {
    return this.value1;
  }

  getImageDate(): string {
    return this.value2;
  }

  getOwner(): Address {
    return this.value3;
  }
}

export class Memories extends ethereum.SmartContract {
  static bind(address: Address): Memories {
    return new Memories("Memories", address);
  }

  idToMemory(param0: Bytes): Memories__idToMemoryResult {
    let result = super.call(
      "idToMemory",
      "idToMemory(bytes32):(bytes32,string,string,address)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return new Memories__idToMemoryResult(
      result[0].toBytes(),
      result[1].toString(),
      result[2].toString(),
      result[3].toAddress()
    );
  }

  try_idToMemory(
    param0: Bytes
  ): ethereum.CallResult<Memories__idToMemoryResult> {
    let result = super.tryCall(
      "idToMemory",
      "idToMemory(bytes32):(bytes32,string,string,address)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Memories__idToMemoryResult(
        value[0].toBytes(),
        value[1].toString(),
        value[2].toString(),
        value[3].toAddress()
      )
    );
  }
}

export class CreateNewMemoryCall extends ethereum.Call {
  get inputs(): CreateNewMemoryCall__Inputs {
    return new CreateNewMemoryCall__Inputs(this);
  }

  get outputs(): CreateNewMemoryCall__Outputs {
    return new CreateNewMemoryCall__Outputs(this);
  }
}

export class CreateNewMemoryCall__Inputs {
  _call: CreateNewMemoryCall;

  constructor(call: CreateNewMemoryCall) {
    this._call = call;
  }

  get imageUrl(): string {
    return this._call.inputValues[0].value.toString();
  }

  get imageDate(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class CreateNewMemoryCall__Outputs {
  _call: CreateNewMemoryCall;

  constructor(call: CreateNewMemoryCall) {
    this._call = call;
  }
}
